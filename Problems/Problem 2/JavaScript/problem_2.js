/***********************************
 *
 * Problem 1 from Project Euler
 *
 * Each new term in the Fibonacci sequence is generated by adding the previous two terms.
 * By starting with 1 and 2, the first 10 terms will be:
 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 * 
 * By considering the terms in the Fibonacci sequence whose values do not exceed four million,
 * find the sum of the even-valued terms.
 *
 * This file is made with Sublime Text 2
 * 
 * PLEASE NOTE
 * In order to work you must have one of following browsers: Chrome, Firefox, IE9+, Opera 10.5+, Safari 4.0+, all mobile browsers
 * and nodejs of course.
 *
 * REGARDING THE PERFORMANCE
 * This is not the final version, as you can see I'll trace the version of every solution, so please don't think that
 * this is the best algorithm in terms of speed and code optimization, for any trouble open an issue.
 *
 * @author Matteo Manchi (@matteomanchi)
 * @version 1.1
 *************************************/

// Start the benchmark
var startTime = Date.now();


// Upperbound of Fibonacci values
var upperBound = 4e16;

// Keep last two Fibonacci values to calculate the next one
var lastTwoFibNumbers = [0, 1];

// The problem's result
var total = 0;

while(lastTwoFibNumbers[1] < upperBound) {
    var newFib = lastTwoFibNumbers[0] + lastTwoFibNumbers[1];
    lastTwoFibNumbers = [lastTwoFibNumbers[1], newFib];

    if(lastTwoFibNumbers[0] % 2 === 0)
        total += lastTwoFibNumbers[0];
}

// End of benchmark
var endTime = Date.now();
console.log('Algorithm time: ' + (endTime - startTime));