import java.util.ArrayList;
import java.util.List;

/**
 * Problem 2 from Project Euler
 * 
 * Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10
 * terms will be:
 * 	1,2,3,5,8,13,21,34,55,89 ...
 * 
 * By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms
 * 
 * PLEASE NOTE
 * In order to compile you must have JDK installed on your machine
 * 
 * REGARDING THE PERFORMANCE
 * This is not the final version of the script, you can improve the algorithm by submitting pull request or issue on Github.
 * Feel free to ask for anything on Github.
 * 
 * @author Claudio Ludovico Panetta (@Ludo237)
 * @version 1.0.0
 *
 */
public class Problem_2 {
	
	// Starting pivot points
	private static int[] pivots = {1,2};
	// Fibonacci's results
	private static List<Integer> fibonacci = new ArrayList<Integer>();
	
	private static int arraySum(int[] pivots) {
		if( pivots.length == 0)
			return 0;
		int summatory = 0;
		for(int i:pivots)
            summatory += i;
		return summatory;
	}
	
	private static void refreshPivots(int newNumber) {
		pivots[0] = pivots[1];
		pivots[1] = newNumber;
	}
	
	public static void main(String[] args) {
		// As always we cannot "fixed" the size of our algorithm
		final int size = 32; // Fibonacci's numbers, you can change it
		// Total
		double total = 0;
		
		// Now the fun part of the algorithm
		for( int i = 0; i < size; i++) {
			if( i == 0 || i == 1)
				fibonacci.add(i);
			else {
				fibonacci.add( arraySum(pivots) );
				refreshPivots(fibonacci.get(i));
			}
			
			if( fibonacci.get(i) % 2 == 0)
				total += fibonacci.get(i);
		}
	}
}
